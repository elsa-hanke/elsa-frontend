variables:
  vmImageName: "Ubuntu 16.04"
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

stages:
  - stage: Build
    displayName: Build stage
    jobs:
      - job: Build
        pool:
          vmImage: $(vmImageName)
        variables:
          YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "10.x"
            displayName: "Install Node.js"
          - task: Cache@2
            inputs:
              key: 'yarn | "$(Agent.OS)" | yarn.lock'
              restoreKeys: |
                yarn | "$(Agent.OS)"
                yarn
              path: $(YARN_CACHE_FOLDER)
            displayName: Cache Yarn packages
          - script: |
              yarn --frozen-lockfile
            displayName: "Install"
          - script: |
              yarn lint
            displayName: "Lint"
          - script: |
              yarn test:unit
            displayName: "Test"
          - script: |
              yarn test:e2e:headless
            displayName: "E2E Test"
          - script: |
              yarn generate-thirdparty
            displayName: "Generate thirdparty"
          - script: |
              yarn build
            displayName: "Build"
          - publish: $(System.DefaultWorkingDirectory)/dist
            artifact: ElsaFrontendApp

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build
    condition: and(succeeded(), eq(variables.isMain, true))
    jobs:
      - deployment: Deploy
        displayName: Deploy
        environment: "development"
        pool:
          vmImage: $(vmImageName)
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: ElsaFrontendApp
                - task: AWSCLI@1
                  inputs:
                    awsCredentials: "elsa-ci"
                    regionName: "eu-west-1"
                    awsCommand: "s3"
                    awsSubCommand: "rm"
                    awsArguments: "s3://kehitys.elsapalvelu.fi/  --recursive"
                - task: S3Upload@1
                  inputs:
                    awsCredentials: "elsa-ci"
                    regionName: "eu-west-1"
                    bucketName: "kehitys.elsapalvelu.fi"
                    sourceFolder: "$(Pipeline.Workspace)/ElsaFrontendApp"
                    globExpressions: "**"
                  displayName: "Deploy to S3"
                - task: AWSCLI@1
                  inputs:
                    awsCredentials: "elsa-ci"
                    regionName: "eu-west-1"
                    awsCommand: "cloudfront"
                    awsSubCommand: "create-invalidation"
                    awsArguments: '--distribution-id E12KDI5JPO05NG --paths "/*"'
 
  - stage: Deploy_testi
    displayName: Deploy testi
    dependsOn: Build
    condition: and(succeeded(), eq(variables.isMain, true))
    jobs:
      - deployment: Deploy
        displayName: Deploy testi
        environment: "testi"
        pool:
          vmImage: $(vmImageName)
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: ElsaFrontendApp
                - task: AWSCLI@1
                  inputs:
                    awsCredentials: "staging-elsa-ci"
                    regionName: "eu-west-1"
                    awsCommand: "s3"
                    awsSubCommand: "rm"
                    awsArguments: "s3://testi.elsapalvelu.fi/  --recursive"
                - task: S3Upload@1
                  inputs:
                    awsCredentials: "staging-elsa-ci"
                    regionName: "eu-west-1"
                    bucketName: "testi.elsapalvelu.fi"
                    sourceFolder: "$(Pipeline.Workspace)/ElsaFrontendApp"
                    globExpressions: "**"
                  displayName: "Deploy to S3"
                - task: AWSCLI@1
                  inputs:
                    awsCredentials: "staging-elsa-ci"
                    regionName: "eu-west-1"
                    awsCommand: "cloudfront"
                    awsSubCommand: "create-invalidation"
                    awsArguments: '--distribution-id E38QJR989CC6DM --paths "/*"'